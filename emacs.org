* Emacs Configuration
** To-Do Items
    - [X] Define function to safely load packages
    - [ ] Configure =init.el= to support reading multiple org files
    - [ ] Configure paths to keep =.emacs.d= as clean as possible
    - [X] Configure Magit
    - [5/5] Configure go-mode
      - [X] goimports
      - [X] go-eldoc
      - [X] golint
      - [X] company-go
      - [X] flycheck
    - [2/3] Configure Babel for Golang
      - [X] configure ob-go
      - [X] configure restclient package
      - [ ] test golang block calling rest api
    - [X] Configure eshell
      
** ELPA Repositories
*** Set up package repositories.
    #+begin_src emacs-lisp
      (require 'package)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
      (package-initialize)
    #+end_src

    - Create a function to avoid re-installing packages.
      #+BEGIN_SRC emacs-lisp
        (defun package-safe-install (&rest packages)
          (dolist (package packages)
            (unless (package-installed-p package)
              (package-install package))
            (require package)))
      #+END_SRC

** Default Packages 
   Packages that should be loaded on startup.
   #+name: load-on-startup
   #+begin_src emacs-lisp
     (require 'cl)
     (require 'cl-lib)
     (require 'ffap)
     (require 'uniquify)
     (require 'ansi-color)
     (require 'recentf)
     (require 'saveplace)
   #+end_src

** Globals

*** Path Configuration
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/lisp")
    #+END_SRC

*** On OSX, change META key from OPTION to COMMAND.
    #+BEGIN_SRC emacs-lisp
      (setq mac-command-modifier 'meta)
      (setq mac-option-modifier nil)
    #+END_SRC

*** Set up global key bindings.
- Quickly toggle =auto-fill-mode=
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c q") 'auto-fill-mode)
  #+END_SRC

 - Automatically reindent current line and new line on =RET=
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") 'reindent-then-newline-and-indent)      
  #+END_SRC

- Kill word backward
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-M-h") 'backward-kill-word)
  #+END_SRC

 - Backspace
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-h" 'backward-delete-char)
#+END_SRC
*** Clean up some of the graphical defaults.
    #+BEGIN_SRC emacs-lisp
      (set-scroll-bar-mode nil)
      (tool-bar-mode 0)
      (menu-bar-mode 1)

      (setf inhibit-startup-screen t
            inhibit-startup-message t
            inhibit-startup-echo-area-message t)

      (setq initial-major-mode 'org-mode)
      (setq initial-scratch-message "")

      (setf column-number-mode t)
      (setf size-indication-mode t)
    #+END_SRC

*** Don't create backup files and turn off auto-save
    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
    #+END_SRC

*** Set up ido
    #+BEGIN_SRC emacs-lisp
      (ido-mode t)
      (setq ido-enable-prefix nil
            ido-enable-flex-matching t
            ido-create-new-buffer 'always
            ido-max-prospects 10)
    #+END_SRC

*** Save a list of recent files visited
    #+BEGIN_SRC emacs-lisp
      (recentf-mode 1)
      (setq recentf-max-menu-items 25)
      (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    #+END_SRC

*** Expand Region
#+BEGIN_SRC emacs-lisp
  (package-safe-install 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
*** Fancy Narrowing
#+BEGIN_SRC emacs-lisp
  (package-safe-install 'fancy-narrow)
#+END_SRC

*** Highlight matching parentheses
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC

*** Transparently open compressed files
    #+BEGIN_SRC emacs-lisp
      (auto-compression-mode t)
    #+END_SRC

*** Miscellaneous Settings
    #+BEGIN_SRC emacs-lisp
      (global-linum-mode t)
      (setq show-trailing-whitespace t)
      (setq column-number-mode t)
      (setq save-abbrevs nil)
      (setq-default save-place t)
      (setq suggest-key-bindings t)
      (setq vc-follow-symlinks t)
      (fset 'yes-or-no-p 'y-or-n-p)
      (delete-selection-mode t)
      (blink-cursor-mode t)
      (setq ring-bell-function 'ignore)
    #+END_SRC

*** Compiling
#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (require 'ansi-color)
    (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
#+END_SRC
** Org Mode

*TODO: configure export to gfm*
*TODO: configure export to reveal.js*
*TODO: author export to hugo*

*** Org-Mode Packages
   #+BEGIN_SRC emacs-lisp
     (require 'org-bullets)
   #+END_SRC
*** Org-Mode Hook
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               (lambda ()
                 (local-set-key "\M-\C-n" 'outline-next-visible-heading)
                 (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
                 (local-set-key "\M-\C-u" 'outline-up-heading)
                 ;; table
                 (local-set-key "\M-\C-w" 'org-table-copy-region)
                 (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
                 (local-set-key "\M-\C-l" 'org-table-sort-lines)
                 ;; display images
                 (local-set-key "\M-I" 'org-toggle-iimage-in-org)
                 (org-bullets-mode 1)))
   #+END_SRC

*** Speed Keys
   Speed commands enable single-letter commands in Org-mode files when
   the point is at the beginning of a headline, or at the beginning of
   a code block.

   See the =org-speed-commands-default= variable for a list of the
   keys and commands enabled at the beginning of headlines.  All code
   blocks are available at the beginnign of a code block, the
   following key sequence =C-c C-v h= (bound to
   =org-babel-describe-bindings=) will display a list of the code
   blocks commands and their related keys.

   _Note: Some features seem to break with fancy-narrow package;
   disabling for now._

   #+BEGIN_SRC emacs-lisp
     (setq org-use-speed-commands nil)
   #+END_SRC

*** Code Block Fontification
   The following displays the contents of code blocks in Org-mode
   files using the major-mode of the code.  It also changes the
   behavior of =TAB= as if it were used in the appropriate major
   mode.  This means that reading and editing code from inside your
   Org-mode files is much more like reading and editing code using its
   major mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+END_SRC
   
*** AutoFill Mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+END_SRC

*** Indented Mode
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-indented t)
   #+END_SRC

*** Personal Configuration
   This is something that should really be extracted into a separate file.

   *TODO: Verify config & Document components*
   
   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/org")
     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-Cr" 'org-capture)
     (setq org-log-done t)

     (setq org-todo-keywords
           '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

     (setq org-default-notes-file (concat org-directory "/notes.org"))

     ;; Org Capture Templates
     (setq org-capture-templates
           '(("t" "Todo" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
              "* TODO %?\n  %i\n")
             ("j" "Journal" entry (file+datetree "~/org/journal.org")
              "* %?\nEntered on %U\n  %i\n  %a")))

     ;; any headline with level <= 2 is a target
     (setq org-refile-targets '((nil :maxlevel . 2)
                                     ; all top-level headlines in the
                                     ; current buffer are used (first) as a
                                     ; refile target
                                (org-agenda-files :maxlevel . 2)))

     ;; provide refile targets as paths, including the file name
     ;; (without directory) as level 1 of the path
     (setq org-refile-use-outline-path 'file)

     ;; allow to create new nodes (must be confirmed by the user) as
     ;; refile targets
     (setq org-refile-allow-creating-parent-nodes 'confirm)

     ;; refile only within the current buffer
     (defun my/org-refile-within-current-buffer ()
       "Move the entry at point to another heading in the current buffer."
       (interactive)
       (let ((org-refile-targets '((nil :maxlevel . 5))))
         (org-refile)))
   #+END_SRC

*** Export to Github Flavored Markdown
#+BEGIN_SRC emacs-lisp
  (require 'ox-gfm)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
    (package-safe-install 'magit)
    (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

*TODO: Document use of Magit*
*TODO: Provide links to useful resources*
*TODO: Provide link to =magit-gitflow=*

** Shell
Set the shell environment to be emacs environment
#+BEGIN_SRC emacs-lisp
  (require 'exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

A few configurations and custom defined shell methods for
eshell. Eshell is a terminal replacement implemented entirely in
elisp. This sounds weird. It is weird. It has the benefit of having
elisp as a first class language so you can do things like: =cat
foo/bar/baz > (switch-to-buffer "*test*")= which opens the file
contents in a new buffer named =*test*=.
#+BEGIN_SRC emacs-lisp
  (push "/usr/local/bin" exec-path)
    
  (setenv "PATH" (concat (getenv "PATH") ":" "/usr/local/bin"))

  ;; if OSX...
  (if (equal window-system 'ns)
      (push "/Applications/Emacs.app/Contents/MacOS/bin" exec-path))

  (setq eshell-history-size nil) ;; sets it to $HISTSIZE
      
  (defun eshell/clear ()
    "clear the eshell buffer."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)))  
#+END_SRC

** Go-mode Configuration
Extracted from my previous =.emacs= file.
#+BEGIN_SRC emacs-lisp
  ;; Assumes PATH environment is properly configured

  (setenv "GOPATH" "/Users/dan/code/golang")

  (package-safe-install 'go-mode)
  (add-hook 'before-save-hook 'gofmt-before-save)
  (package-safe-install 'go-eldoc)
  (add-hook 'go-mode-hook 'go-eldoc-setup)

  ;; golint
  ;; (add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
  ;; (require 'golint)

  ;; goflymake
  (add-to-list 'load-path (concat (getenv "GOPATH") "/src/github.com/dougm/goflymake"))
  (require 'go-flymake)

  ;; company
  (package-safe-install 'company)   
  (package-safe-install 'company-go)
  (setq company-tooltip-limit 20)   
  (setq company-idle-delay .3)      
  (setq company-echo-delay 0)       
  (setq company-begin-commands '(self-insert-command))

  (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))
                            (company-mode)
                            (if (not (string-match "go" compile-command))
                                (set (make-local-variable 'compile-command)
                                     "go build -v && go test -v -coverprofile=coverage.out && go vet"))))

  (setq gofmt-command "goimports")
#+END_SRC

** Elixir Mode Configuration
#+BEGIN_SRC emacs-lisp
  (package-safe-install 'alchemist)
#+END_SRC
** Babel
*** Golang support
#+BEGIN_SRC emacs-lisp
(require 'ob-go)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/emacs-livedown"))
  (custom-set-variables
   '(livedown:autostart nil)
   '(livedown:open t)
   '(livedown:port 1337))
  (require 'livedown)

  (global-set-key (kbd "C-M-m") 'livedown:preview)
#+END_SRC
** Restclient
#+BEGIN_SRC emacs-lisp
  (package-safe-install 'restclient)
#+END_SRC
